---
- name: Auto Deployment
  hosts: localhost
  vars:
    env_file_path: "{{project_path}}/.env"

    email_recipient: "{{ (lookup('file', env_file_path) | regex_search('^MAIL_TO=(.*)$', '\\1', multiline=True))[0].strip() | replace('\"', '')}}"
    email_sender: "{{ (lookup('file', env_file_path) | regex_search('^MAIL_FROM_ADDRESS=(.*)$', '\\1', multiline=True))[0].strip() | replace('\"', '')}}"
    smtp_server: "{{ (lookup('file', env_file_path) | regex_search('^MAIL_HOST=(.*)$', '\\1', multiline=True))[0].strip() | replace('\"', '')}}"
    smtp_username: "{{ (lookup('file', env_file_path) | regex_search('^MAIL_USERNAME=(.*)$', '\\1', multiline=True))[0].strip() | replace('\"', '') }}"
    smtp_password: "{{ (lookup('file', env_file_path) | regex_search('^MAIL_PASSWORD=(.*)$', '\\1', multiline=True))[0].strip() | replace('\"', '') }}"
    project_path: "{{project_path}}"
    ssh_key_path: "{{ (lookup('file', env_file_path) | regex_search('^SSH_KEY_PATH=(.*)$', '\\1', multiline=True))[0].strip() | replace('\"', '') }}"
    json_log_file: "{{ project_path }}/storage/logs/deployment_log.json"

    email_faild_body: |
        <!DOCTYPE html>
        <html lang="en">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Deployment Failure Report</title>
          <style>
              body {
                  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                  background-color: #c0c0c0bb;
                  padding:12px;
                  margin: 0; 
              }
              .container {
                  max-width: 800px;
                  margin: 20px auto;
                  background-color: #ffffff;
                  border-radius: 10px;
                  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                  overflow: hidden;
              }

              .header {
                  background-color: tomato;
                  color: #ffffff;
                  padding: 20px;
                  text-align: center;
                  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
              }

              .header h1 {
                  margin: 0;
                  font-size: 24px;
              }

              .content {
                  padding: 20px;
              }

              .section {
                  margin-bottom: 20px;
              }

              .section h2 {
                  font-size: 20px;
                  color: #2c3e50;
                  border-bottom: 2px solid #ecf0f1;
                  padding-bottom: 5px;
                  margin-bottom: 15px;
              }

              .section pre {
                  background-color: #ecf0f1;
                  padding: 15px;
                  border-radius: 5px;
                  font-size: 14px;
                  line-height: 1.5;
                  color: #2c3e50;
                  white-space: pre-wrap;
                  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
              }

              .highlight {
                  color: #e74c3c;
                  font-weight: bold;
              }

              .footer {
                  background-color: tomato;
                  text-align: center;
                  padding: 8px;
                  color: white;
                  font-size: 18px;
                  box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
              }

              .footer a {
                  color: #3498db;
                  text-decoration: none;
              }

              @media only screen and (max-width: 600px) {
                  .content {
                      padding: 15px;
                  }

                  .header h1 {
                      font-size: 20px;
                  }

                  .section h2 {
                      font-size: 18px;
                  }
              }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="header">
              <h1>ðŸš¨ Deployment Failure Report ðŸš¨</h1>
            </div>
            <div class="content">
              {% if git_pull is defined %}
              <div class="section">
                <h2>Git Pull Output</h2>
                <pre>{{git_pull.stderr or git_pull.stdout or 'No error output available'}}</pre>
              </div>
              {% endif %}

              <div class="section">
                <h2>Remove Composer.lock file</h2>
                {% if composerlock_exists.stat.exists %}
                <pre>{{remove_composerlock.stdout or remove_composerlock.stderr or "NO OUTPUT"}}</pre>
                {% else %}
                <pre>No Composer.lock file Present</pre>
                {% endif %}
              </div>

              <div class="section">
                <h2>Composer Install</h2>
                {% if composer_install is defined %}
                <pre>{{clean_output or composer_install.stderr or "NO OUTPUT"}}</pre>
                {% else %}
                <pre>No Composer Install Process Started</pre>
                {% endif %}
              </div>

              <div class="section">
                <h2>Migrations Output</h2>
                {% if migrations is defined %}
                  {% if migrations.skipped is defined and migrations.skipped == 0 %}
                    <pre>Migration Process is Skipped</pre>
                  {% else %}
                    <pre>{{migrations.stdout or migrations.stderr or "NO OUTPUT"}}</pre>
                  {% endif %}
                {% else %}
                  <pre>No Migrations Process Started</pre>
                {% endif %}
              </div>

              <div class="section">
                <h2>Optimize Clear Output</h2>
                {% if optimize_clear is defined %}
                  {% if optimize_clear.skipped is defined and optimize_clear.skipped == 0 %}
                    <pre>Optimize Clear Process is Skipped</pre>
                  {% else %}
                    <pre>{{optimize_clear.stdout or optimize_clear.stderr or "NO OUTPUT"}}</pre>
                  {% endif %}
                {% else %}
                  <pre>No Optimize Clear Process Started</pre>
                {% endif %}
              </div>

              <div class="section">
                <h2>Compiled Clear Output</h2>
                {% if compiled_clear is defined %}
                  {% if compiled_clear.skipped is defined and compiled_clear.skipped == 0 %}
                    <pre>Compiled Clear Process is Skipped</pre>
                  {% else %}
                    <pre>{{compiled_clear.stdout or compiled_clear.stderr or "NO OUTPUT"}}</pre>
                  {% endif %}
                {% else %}
                  <pre>No Compiled Clear Process Started</pre>
                {% endif %}
              </div>

              <div class="section">
                <h2>Queue flushed Output</h2>
                {% if queue_flush is defined %}
                  {% if queue_flush.skipped is defined and queue_flush.skipped == 0 %}
                    <pre>Queue flushed Process is Skipped</pre>
                  {% else %}
                    <pre>{{queue_flush.stdout or queue_flush.stderr or "NO OUTPUT"}}</pre>
                  {% endif %}
                {% else %}
                  <pre>No Queue flushed Process Started</pre>
                {% endif %}
              </div>

              <div class="section">
                <h2>Queue Restart Output</h2>
                {% if queue_restart is defined %}
                  {% if queue_restart.skipped is defined and queue_restart.skipped == 0 %}
                    <pre>Queue Restart Process is Skipped</pre>
                  {% else %}
                    <pre>{{queue_restart.stdout or queue_restart.stderr or "NO OUTPUT"}}</pre>
                  {% endif %}
                {% else %}
                  <pre>No Queue Restart Process Started</pre>
                {% endif %}
              </div>

            </div>
            <div class="footer">
              <p>&copy; 2024 Deployment Team | Mohd Ishrat |</p>
            </div>
          </div>
        </body>
        </html>

    email_success_body: |
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Deployment Success Report</title>
          <style>
              body {
                  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                  background-color: #f4f4f4;
                  margin: 0;
                  padding: 0;
                  color: #333;
                  padding-left: 12px;
                  padding-right: 12px;
              }

              .container {
                  max-width: 800px;
                  margin: 20px auto;
                  background-color: #ffffff;
                  border-radius: 10px;
                  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                  overflow: hidden;
              }

              .header {
                  background-color: #17d86e;
                  color: #ffffff;
                  padding: 20px;
                  text-align: center;
                  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
              }

              .header h1 {
                  margin: 0;
                  font-size: 24px;
              }

              .content {
                  padding: 20px;
              }

              .section {
                  margin-bottom: 20px;
              }

              .section h2 {
                  font-size: 20px;
                  color: #2c3e50;
                  border-bottom: 2px solid #ecf0f1;
                  padding-bottom: 5px;
                  margin-bottom: 15px;
              }

              .section pre {
                  background-color: #ecf0f1;
                  padding: 15px;
                  border-radius: 5px;
                  font-size: 14px;
                  line-height: 1.5;
                  color: #2c3e50;
                  white-space: pre-wrap;
                  box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
              }

              .footer {
                  background-color: #17d86e;
                  text-align: center;
                  padding: 8px;
                  color: white;
                  font-size: 18px;
                  box-shadow: 0 -2px 6px rgba(0, 0, 0, 0.1);
              }

              .footer a {
                  color: #ffffff;
                  text-decoration: none;
              }

              @media only screen and (max-width: 600px) {
                  .content {
                      padding: 15px;
                  }

                  .header h1 {
                      font-size: 20px;
                  }

                  .section h2 {
                      font-size: 18px;
                  }
              }

              pre
              {
                  background-color: #2c3e50;
                  color: #ecf0f1;
                  padding: 10px;
                  border-radius: 5px;
                  white-space: pre-wrap;
                  font-family: monospace;
              }
              .info
              {
                  color: #3498db;
              }

              .done {
                  color: #2ecc71;
              }
              .highlight {
                  font-weight: bold;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <h1>ðŸŽ‰ Deployment Success Report ðŸŽ‰</h1>
              </div>

              <div class="content">
                  {% if git_pull is defined %}
                  <div class="section">
                    <h2>Git Pull Output</h2>
                    <pre>{{git_pull.stdout or git_pull.stderr or 'No error output available'}}</pre>
                  </div>
                  {% endif %}

                  <div class="section">
                    <h2>Remove Composer.lock file</h2>
                    {% if composerlock_exists.stat.exists %}
                    <pre>{{remove_composerlock.stdout or remove_composerlock.stderr or "NO OUTPUT"}}</pre>
                    {% else %}
                    <pre>No Composer.lock file Present</pre>
                    {% endif %}
                  </div>

                  <div class="section">
                    <h2>Composer Install</h2>
                    {% if composer_install is defined %}
                    <pre>{{clean_output or composer_install.stderr or "NO OUTPUT"}}</pre>
                    {% else %}
                    <pre>No Composer Install Process Started</pre>
                    {% endif %}
                  </div>

                  <div class="section">
                    <h2>Migrations Output</h2>
                    {% if migrations is defined %}
                      {% if migrations.skipped is defined and migrations.skipped == 0 %}
                        <pre>Migration Process is Skipped</pre>
                      {% else %}
                        <pre>{{migrations.stdout or migrations.stderr or "NO OUTPUT"}}</pre>
                      {% endif %}
                    {% else %}
                      <pre>No Migrations Process Started</pre>
                    {% endif %}
                  </div>

                  <div class="section">
                    <h2>Optimize Clear Output</h2>
                    {% if optimize_clear is defined %}
                      {% if optimize_clear.skipped is defined and optimize_clear.skipped == 0 %}
                        <pre>Optimize Clear Process is Skipped</pre>
                      {% else %}
                        <pre>{{optimize_clear.stdout or optimize_clear.stderr or "NO OUTPUT"}}</pre>
                      {% endif %}
                    {% else %}
                      <pre>No Optimize Clear Process Started</pre>
                    {% endif %}
                  </div>

                  <div class="section">
                    <h2>Compiled Clear Output</h2>
                    {% if compiled_clear is defined %}
                      {% if compiled_clear.skipped is defined and compiled_clear.skipped == 0 %}
                        <pre>Compiled Clear Process is Skipped</pre>
                      {% else %}
                        <pre>{{compiled_clear.stdout or compiled_clear.stderr or "NO OUTPUT"}}</pre>
                      {% endif %}
                    {% else %}
                      <pre>No Compiled Clear Process Started</pre>
                    {% endif %}
                  </div>

                  <div class="section">
                    <h2>Queue flushed Output</h2>
                    {% if queue_flush is defined %}
                      {% if queue_flush.skipped is defined and queue_flush.skipped == 0 %}
                        <pre>Queue flushed Process is Skipped</pre>
                      {% else %}
                        <pre>{{queue_flush.stdout or queue_flush.stderr or "NO OUTPUT"}}</pre>
                      {% endif %}
                    {% else %}
                      <pre>No Queue flushed Process Started</pre>
                    {% endif %}
                  </div>

                  <div class="section">
                    <h2>Queue Restart Output</h2>
                    {% if queue_restart is defined %}
                      {% if queue_restart.skipped is defined and queue_restart.skipped == 0 %}
                        <pre>Queue Restart Process is Skipped</pre>
                      {% else %}
                        <pre>{{queue_restart.stdout or queue_restart.stderr or "NO OUTPUT"}}</pre>
                      {% endif %}
                    {% else %}
                      <pre>No Queue Restart Process Started</pre>
                    {% endif %}
                  </div>

                </div>
              <div class="footer">
                  <p>&copy; 2024 Deployment Team | Mohd Ishrat</p>
              </div>
          </div>
      </body>
      </html>

  tasks:
    - name: Pull New Changes
      command: git pull origin master
      args:
        chdir: "{{project_path}}"
      environment:
        GIT_SSH_COMMAND: "ssh -i {{ssh_key_path}} -o StrictHostKeyChecking=no"
      register: git_pull
      ignore_errors: yes

    - name: Save Git Pull Result to JSON
      copy:
        dest: "{{ json_log_file }}"
        content: "{{ { 'git_pull': git_pull | to_json } | to_nice_json }}"
      when: git_pull is defined

    - name: Git Pull Output
      debug:
        msg: "{{git_pull.stdout or git_pull.stderr or 'NO OUTPUT'}}"
      ignore_errors: yes

    - name: Check if composer.lock exists
      stat:
        path: "{{project_path}}/composer.lock"
      register: composerlock_exists

    - name: Remove Composer File
      command: rm composer.lock
      args:
        chdir: "{{project_path}}"
      when:
        - git_pull is succeeded
        - composerlock_exists.stat.exists
      register: remove_composerlock
      ignore_errors: yes

    - name: Composer Install
      command: composer install
      args:
        chdir: "{{project_path}}"
      register: composer_install
      ignore_errors: yes
      when:
        - git_pull is succeeded

    - name: Clean ANSI escape sequences from composer output
      set_fact:
        clean_output: "{{ composer_install.stdout | regex_replace('\x1B\\[[0-9;]*[a-zA-Z]', '') }}"
      when:
        - git_pull is succeeded
        - composer_install is succeeded

    - name: Composer Install Output
      debug:
        msg: "{{clean_output or composer_install.stderr or 'NO OUTPUT'}}"
      when:
        - git_pull is succeeded
        - composer_install is succeeded

    - name: Run Migrations
      command: php artisan migrate --force
      args:
        chdir: "{{project_path}}"
      register: migrations
      when:
        - git_pull is succeeded
        - composer_install is succeeded
      ignore_errors: yes

    - name: Migrations Output
      debug:
        msg: "{{migrations.stdout or migrations.stderr or 'NO OUTPUT'}}"
      when:
        - git_pull is succeeded
        - composer_install is succeeded

    - name: Optimize Clear
      command: php artisan optimize:clear
      args:
        chdir: "{{project_path}}"
      register: optimize_clear
      ignore_errors: yes
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded

    - name: Optimize Clear Output
      debug:
        msg: "{{optimize_clear.stdout}}"
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded

    - name: Compiled Clear
      command: php artisan clear-compiled
      args:
        chdir: "{{project_path}}"
      register: compiled_clear
      ignore_errors: yes
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded

    - name: Compile Clear Output
      debug:
        msg: "{{compiled_clear.stdout or compiled_clear.stderr or 'NO OUTPUT'}}"

    - name: Queue Flush
      command: php artisan queue:flush
      args:
        chdir: "{{project_path}}"
      register: queue_flush
      ignore_errors: yes
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded

    - name: Queue Flush Output
      debug:
        msg: "{{queue_flush.stdout or queue_flush.stderr or 'NO OUTPUT'}}"

    - name: Queue Restart
      command: php artisan queue:restart
      args:
        chdir: "{{project_path}}"
      register: queue_restart
      ignore_errors: yes
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded

    - name: Queue Restart Output
      debug:
        msg: "{{queue_restart.stdout or queue_restart.stderr or 'NO OUTPUT'}}"

    - name: Set Logs Permissions
      command: sudo chmod -R 777 storage/logs
      args:
        chdir: "{{project_path}}"
      ignore_errors: yes
      register: log_permission
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded
        - optimize_clear is succeeded

    - name: Log Permission Output
      debug:
        msg: "{{log_permission.stdout or log_permission.stderr or 'NO OUTPUT'}}"
      when: log_permission is succeeded or log_permission is failed
      ignore_errors: yes

    - name: Set Storage Framework Permissions
      command: sudo chmod -R 777 storage/framework/
      args:
        chdir: "{{project_path}}"
      ignore_errors: yes
      register: storage_framework_permission
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded
        - optimize_clear is succeeded

    - name: Log Storage framework Output
      debug:
        msg: "{{storage_framework_permission.stdout or storage_framework_permission.stderr or 'NO OUTPUT'}}"
      when: storage_framework_permission is succeeded or storage_framework_permission is failed
      ignore_errors: yes

    - name: Send Email When Build Failed
      mail:
        to: "{{ email_recipient }}"
        from: "{{ email_sender }}"
        subject: "Automation Deployment Failed"
        body: "{{ email_faild_body }}"
        host: "{{ smtp_server }}"
        port: 587
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        secure: starttls
        subtype: html
      when:
        - git_pull is failed or composer_install is failed or migrations is failed

    - name: Send Email When Build Success
      mail:
        to: "{{ email_recipient }}"
        from: "{{ email_sender }}"
        subject: "Automation Deployment Processed "
        body: "{{ email_success_body }}"
        host: "{{ smtp_server }}"
        port: 587
        username: "{{ smtp_username }}"
        password: "{{ smtp_password }}"
        secure: starttls
        subtype: html
      when:
        - git_pull is succeeded
        - composer_install is succeeded
        - migrations is succeeded
        - optimize_clear is succeeded